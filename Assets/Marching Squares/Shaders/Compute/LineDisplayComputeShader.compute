#pragma kernel CSMain

#include "SquaresTable.hlsl"

struct SquareLineData
{
    float2 Position[4];
};

RWStructuredBuffer<SquareLineData> LinesData;
RWStructuredBuffer<float> CellWeightData;

int2 CellAmount;
float IsoLevel;

int CalculateIndex(int cellX, int cellY)
{
    return cellX + (cellY * CellAmount.x);
}

int CalculateSquareType(int cellX, int cellY)
{
    int index = 0;

    if (CellWeightData[CalculateIndex(cellX, cellY + 1)] >= IsoLevel)
    {
        index |= 1;
    }

    if (CellWeightData[CalculateIndex(cellX + 1, cellY + 1)] >= IsoLevel)
    {
        index |= 2;
    }

    if (CellWeightData[CalculateIndex(cellX + 1, cellY)] >= IsoLevel)
    {
        index |= 4;
    }

    if (CellWeightData[CalculateIndex(cellX, cellY)] >= IsoLevel)
    {
        index |= 8;
    }
    
    return index;
}

[numthreads(8, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int cellX = id.x % CellAmount.x;
    int cellY = id.x / CellAmount.x;
    
    if (cellX >= CellAmount.x - 1 || cellY >= CellAmount.y - 1)
        return;
    
    int squareIndex = CalculateSquareType(cellX, cellY);
    
    for (int i = 0; i < 2; i++)
    {
        int indexA = 2 * i;
        int indexB = 2 * i + 1;
        
        int lineA = SquaresLookupTable::LineConnections[squareIndex][indexA];
        int lineB = SquaresLookupTable::LineConnections[squareIndex][indexB];
        
        if (lineB == SquaresLookupTable::InvalidIndex || lineB == SquaresLookupTable::InvalidIndex)
        {
            LinesData[id.x].Position[indexA] = float2(-1, -1);
            LinesData[id.x].Position[indexB] = float2(-1, -1);
        }
        else
        {
            float2 vertA = SquaresLookupTable::SquareVerticles[lineA];
            float2 vertB = SquaresLookupTable::SquareVerticles[lineB];
            
            LinesData[id.x].Position[indexA] = vertA;
            LinesData[id.x].Position[indexB] = vertB;
        }
    }
}
